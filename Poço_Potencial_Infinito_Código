!pip install ipywidgets

import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, FloatSlider, IntSlider, ToggleButtons

# Função para calcular psi_n
def psi_n_func(x, n, a):
    mask = (x >= 0) & (x <= a)
    psi = np.zeros_like(x)
    psi[mask] = np.sqrt(2/a) * np.sin(n * np.pi * x[mask] / a)
    return psi

# Função para calcular energia proporcional (sem unidades explícitas)
def energia_proporcional(n, a):
    return (n**2) / (a**2)

# Função principal de visualização com múltiplos níveis de energia
def plot_wave_function(n=1, a=1.0, mostrar='ψ_n(x)'):
    margem = 0.5 * a
    x = np.linspace(-margem, a + margem, 1000)

    psi = psi_n_func(x, n, a)
    
    if mostrar == '|ψ_n(x)|²':
        y = psi**2
        ylabel = '|ψ_n(x)|²'
        titulo = f'Densidade de Probabilidade |ψ_{n}(x)|²'
    else:
        y = psi
        ylabel = 'ψ_n(x)'
        titulo = f'Função de Onda ψ_{n}(x)'

    energias = [energia_proporcional(i, a) for i in range(1, 5)]

    # Plotagem
    plt.figure(figsize=(10, 8))
    plt.fill_between(x, -2, 2, where=((x < 0) | (x > a)), color='red', alpha=0.3)
    plt.plot(x, y, label=f'{ylabel}', color='black', linewidth=2)
    
    # Linhas de energia
    for i, E in enumerate(energias, 1):
        plt.axhline(E, color='blue', linestyle=':', linewidth=1.5, label=f'E_{i} ∝ {i}²/a²' if i == 1 else None)
    
    plt.axvline(0, color='black', linestyle='--', linewidth=1)
    plt.axvline(a, color='black', linestyle='--', linewidth=1)
    plt.title(titulo)
    plt.xlabel('x')
    plt.ylabel(ylabel)
    plt.grid(True, linestyle='--', linewidth=0.5)
    plt.legend()
    plt.xlim(-margem, a + margem)
    plt.ylim(-0.5, max(2.5, max(energias)*1.2))
    plt.show()

# Interface interativa
interact(
    plot_wave_function,
    n=IntSlider(min=1, max=100, step=1, value=1, description="n (número quântico)", style={'description_width': 'initial'}),
    a=FloatSlider(min=0.5, max=3.0, step=0.1, value=1.0, description="Largura do Poço (a)", style={'description_width': 'initial'}),
    mostrar=ToggleButtons(options=['ψ_n(x)', '|ψ_n(x)|²'], description='Visualizar', style={'description_width': 'initial'})
);
